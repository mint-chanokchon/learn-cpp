
    * pointer
        - เป็นตัวแปรที่เก็บที่อยู่ในหน่วยความจำของตัวแปรอื่น ๆ เพราะบางครั้งเราต้องทำงานกับ address

    * สัญลักที่ใช้ร่วมกัน
        > & address-of operator 
            - ใช้สำหรับส่งค่า address ของข้อมูลกลับมา
        > * dereference operator
            - ใช้สำหรับเข้าถึงข้อมูลที่ได้จาก address

    * Declaring pointer
        - ก่อนที่เราจะใช้ pointer เราจำเป็นต้องประกาศมันขึ้นมาก่อน เหมือนกับตัวแปร
        เพราะว่า pointer เป็นประเภทตัวแปรในตัวมันเอง
        - data_type *name;
            - ประกาศประเภทของข้อมูลที่ Pointer จะชี้ไป
            - ตามด้วยชื่อของ Pointer

    * การใช้งาน pointer กับ array
        - ตำแหน่งของข้อมูลใน array นั้นจะอ้างอิงจากตำแหน่งแรกของ array

    int mynum[5] = {10, 20, 30, 40, 50};
    int *mypoint;
    mypoint = mynum;    // mypoint ชี้ไปยังตำแหน่งแรกของ array 
    *mypoint = 20;      // เปลี่ยนค่าในตำแหน่งที่ mypoint ชี้อยู่เป็น 20
    mypoint++;          // เลื่อนตำแหน่งที่เก็บอยู่ใน mypoint ไป 1 ตำแหน่ง
    *mypoint = 80;      // เปลี่ยนค่าในตำแหน่งที่ mypoint ชี้อยู่เป็น 80
    mypoint = mynum;    // ปรับ mypoint ชี้กลับไปที่ตำแหน่งแรกของ array
    mypoint += 4;       // เลื่อนตำแหน่งที่เก็บอยู่ใน mypoint ไป 4 ตำแหน่ง
    *mypoint = 100;     // เปลี่ยนค่าในตำแหน่งที่ mypoint ชี้อยู่เป็น 100

    result -> 20, 80, 30, 40, 100

    * Pointer address
        - พอนย์เตอร์เก็บค่าที่อยู่ของ memory ที่ข้อมูลนั้นถูกเก็บอยู่ ในการดูตำแหน่งที่ข้อมูลถูกเก็บอยู่ สามารถเข้าถึงได้ 2 วิธีการที่
            - เข้าถึงผ่านตัวแปรพอนย์เตอร์
                - example: int *mypoint = mynum
            - เข้าถึงผ่านสัญลักษณ์ของ memory address (&)
                - example: &mynum